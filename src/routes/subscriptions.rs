use actix_web::{web, HttpResponse};
use chrono::Utc;
use sqlx::PgPool;
use uuid::Uuid;

#[derive(serde::Deserialize)]
pub struct FormData {
    email: String,
    name: String,
}

// before calling this function, actix-web invokes the from_request method for all of this
// functions input
//
// Form::from_request tries to deserialise the body of the HTTP request into the FormData struct
// provided using the rules of URL encoding (serde_urlencoded and Deserialise implementation of
// FormData generated by #[derive(serde::Deserialize)])
//
// If Form::form_request fails, return 400 BAD REQUEST, else if this function is invoked, returns
// the functions value (in this case, 200 OK)
//
// actix-web has a hashmap of types which is used to check if a record already exists by checking
// its type. If so, it retrieves the type and passes it to the handler.
// This is a way of doing "dependency injection"
pub async fn subscribe(form: web::Form<FormData>, db_pool: web::Data<PgPool>) -> HttpResponse {
    match sqlx::query!(
        r#"
        INSERT INTO subscriptions (id, email, name, subscribed_at)
        VALUES ($1, $2, $3, $4)
        "#,
        Uuid::new_v4(),
        form.email,
        form.name,
        Utc::now()
    )
    .execute(db_pool.get_ref())
    .await
    {
        Ok(_) => HttpResponse::Ok().finish(),
        Err(e) => {
            println!("Failed to execute query {}", e);
            HttpResponse::InternalServerError().finish()
        }
    }
}
