use actix_web::dev::Server;
use actix_web::{web, App, HttpRequest, HttpResponse, HttpServer, Responder};

use std::net::TcpListener;

async fn greet(req: HttpRequest) -> impl Responder {
    let name = req.match_info().get("name").unwrap_or("World");
    format!("Hello {}!", &name)
}

async fn health_check(_: HttpRequest) -> impl Responder {
    HttpResponse::Ok().finish()
}

#[derive(serde::Deserialize)]
pub struct FormData {
    email: String,
    name: String,
}

// before calling this function, actix-web invokes the from_request method for all of this
// functions input
//
// Form::from_request tries to deserialise the body of the HTTP request into the FormData struct
// provided using the rules of URL encoding (serde_urlencoded and Deserialise implementation of
// FormData generated by #[derive(serde::Deserialize)])
//
// If Form::form_request fails, return 400 BAD REQUEST, else if this function is invoked, returns
// the functions value (in this case, 200 OK)
async fn subscriptions(_form: web::Form<FormData>) -> HttpResponse {
    HttpResponse::Ok().finish()
}

pub fn run(listener: TcpListener) -> Result<Server, std::io::Error> {
    let server = HttpServer::new(|| {
        App::new()
            .route("/", web::get().to(greet))
            .route("/health_check", web::get().to(health_check))
            .route("/subscriptions", web::post().to(subscriptions))
            .route("/{name}", web::get().to(greet))
    })
    .listen(listener)?
    .run();
    Ok(server)
}
